spring.application.name: spring-security-oauth2

server:
  port: 8081

spring:
  security:
    oauth2:
      client:
        # 클라이언트 설정
        registration:
          # OAuth2ClientProperties 의 내부 registration Map 의 key로 삽입된다.
          keycloak:
            # 서비스 공급자에 등록된 클라이언트 id
            clientId: oauth2-client-app
            # 서비스 공급자에 등록된 클라이언트 비밀번호
            clientSecret: 1tIeERcVJnWNmVZIEFA7Ao5YkTIbx83w
            # 클라이언트 이름
            clientName: oauth2-client-app
            # OAuth 2.0 권한부여 타입
            authorizationGrantType: authorization_code
            # 인가 서버에서 권한 코드 부여 후 클라이언트로 다시 리다이렉트 하는 위치
            redirectUri: http://localhost:8081/login/v2/oauth2/code/keycloak
            # 인가 서버 token 발급 시 Client를 입증할 수단
            # client_secret_basic -> client_id:client_secret 값을 base64 인코딩한 값을 Authorization 헤더에 삽입하여 전달하는 방식
            # client_secret_post : 파라미터 방식
            # 그 외 none ...
            clientAuthenticationMethod: client_secret_basic
            # 토큰이 허가하는 유효범위
            scope: openid,profile,email
        # 서비스 제공자 설정
        provider:
          # OAuth2ClientProperties 의 내부 provider Map 의 key로 삽입된다.
          keycloak:
            # OpenID Connect 검색 엔드포인트 또는 RFC 8414에 정의된 OAuth 2.0 인증 서버 메타데이터 엔드포인트일 수 있는 URI 의 BaseUri
            # 공급자의 baseUri
            # 해당 Uri에 /.well-known/openid-configuration 를 붙여 검색 엔드포인트를 탐색하게 된다.
            issuerUri: http://localhost:8080/realms/oauth2
            # code를 발급받을 엔드포인트
            authorizationUri: http://localhost:8080/realms/oauth2/protocol/openid-connect/auth
            # token을 발급받을 엔드포인트
            tokenUri: http://localhost:8080/realms/oauth2/protocol/openid-connect/token
            # 클라이언트가 resource server에게 데이터를 요청할 때 access token 을 전달해야 하는데
            # 이 access token을 검증하기 위한 공개키를 얻기 위한 엔드포인트
            jwkSetUri: http://localhost:8080/realms/oauth2/protocol/openid-connect/certs
            # 사용자 정보를 발급받을 엔드포인트 uri
            userInfoUri: http://localhost:8080/realms/oauth2/protocol/openid-connect/userinfo
            # OAuth2 사용자명을 추출할 key (클레임명. keycloak 기준으로는 preferred_username)
            # profile 스코프가 있어야 이 key로 사용자 이름을 가져올 수 있음
            userNameAttribute: preferred_username
